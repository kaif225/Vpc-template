stages:
  - build
  - container_scan
  - deploy

variables:
  SERVICE_NAME: node-stack 
  TAG_COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  TAG_LATEST: $CI_REGISTRY_IMAGE:latest

build:
  image: docker:latest
  stage: build
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
#    - docker push $TAG_LATEST

test:
  image: docker:latest
  stage: container_scan
  script:
     - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
     - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $TAG_COMMIT

deploy_to_local:
  stage: deploy
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SSH_SERVER "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    #- ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SSH_SERVER "docker service rm  $SERVICE_NAME || true"
    #- ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SSH_SERVER "docker service create --name $SERVICE_NAME -p 3000-3001:3000  --replicas 2 $TAG_COMMIT"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SSH_SERVER "docker pull $TAG_COMMIT"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SSH_SERVER "docker service update --image $TAG_COMMIT $SERVICE_NAME"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SSH_SERVER "docker container prune -f"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SSH_SERVER "docker images -q $CI_REGISTRY_IMAGE | grep -v $(docker images -q $TAG_COMMIT) | xargs --no-run-if-empty docker rmi -f"
  

